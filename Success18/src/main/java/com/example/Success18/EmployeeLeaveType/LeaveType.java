package com.example.Success18.EmployeeLeaveType;

import com.example.Success18.EmployeeLeave.Leave;
import com.example.Success18.Utilities.LeaveTypeEnum;
import com.fasterxml.jackson.annotation.JsonIgnore;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.ToString;

import javax.persistence.*;
import java.util.Date;
import java.util.List;

@Data//set getters,setters,toString()
// methods
@AllArgsConstructor
@NoArgsConstructor// set all constructors without parameters
@Entity//To map a class as an entity to mean it will be mapped into database tables

@Table(name = "leaveTypes") //name table of the class in database
public class LeaveType {
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO) //the id of the class is autogenerated by the system
    //@Column(updatable = false)
    private Long id;
    //private LeaveTypeEnum typeEnum;
    @Column(nullable = false, length = 100)
    @Enumerated(EnumType.STRING)
    private LeaveTypeEnum leaveType;
    private String leaveDescription;
    //@Column(nullable = false, length = 3)
    private Character hasPeriod = 'Y';
    private Long durationAllowed;
    private Character incurDeduction = 'N';
    private Character fullPaymentFirstMonth = 'N';


    //    private Boolean monthlyRateIsForPrecedingMonthsOnly = true;
    private Double monthlyRate;
    private Character hasAllowance = 'N';
    private Integer thresholdDays;
    private Double allowanceAmount;
    private String status = "Pending";
    private Boolean isEnabled = false;
    //@Column(nullable = false)
    //@JsonIgnore
    private Character postedFlag = 'Y';
    //        @Column(nullable = false)
    //@JsonIgnore
//        @JsonProperty(access = JsonProperty.Access.READ_ONLY)
//        private LocalDateTime postedTime;
    //@Column(nullable = false, length = 15)
   // @JsonIgnore // To prevent circular reference problem
    private String postedBy; //= "Superuser";
    //@Column(nullable = false)
    @JsonIgnore
    private Character verifiedFlag = 'N';
    @JsonIgnore
    private Date verifiedTime;
    //@Column(length = 15)
    @JsonIgnore //to ignore the field when changing data to Json and vice versa
    private String verifiedBy;
    @Column(length = 15)
    @JsonIgnore
    private String modifiedBy;
    //@Column(nullable = false)
    @JsonIgnore
    private Character modifiedFlag = 'N';
    @JsonIgnore
    private Date modifiedTime;
   // @Column(nullable = false)
    @JsonIgnore
    private Character deletedFlag = 'N';
    @JsonIgnore
    private Date deletedTime;
    @JsonIgnore
    private String deletedBy;

//        @OneToMany(mappedBy = "leaveType", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
//        @JsonIgnore
//        @ToString.Exclude
//        private List<LeaveType> leaveTypeList;

    //public void setEmployeeLeaves(List<EmployeeLeave> employeeLeaves){
    //employeeLeaves.forEach(employeeLeave -> {
    // employeeLeave.setLeaveType(this);
    // });
    // this.employeeLeaves = employeeLeaves;
    // }






// To mean many leaves can have one leave type
    @OneToMany(mappedBy = "leaveType", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    @JsonIgnore
    @ToString.Exclude //to prevent the to String method from being executed
    private List<Leave> Leaves;



}


